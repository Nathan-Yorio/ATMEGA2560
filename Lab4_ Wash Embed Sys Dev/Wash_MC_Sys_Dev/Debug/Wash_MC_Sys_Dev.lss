
Wash_MC_Sys_Dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  0000025c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011be  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d5e  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000748  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00002a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000658  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000555  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000370d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e5       	ldi	r30, 0x5C	; 92
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	a3 c0       	rjmp	.+326    	; 0x258 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
//#include <util/delay.h>

int main(void)
{
    io_init(); //initialize input output
	init_timer0(); //initialize custom timer
 114:	2d d0       	rcall	.+90     	; 0x170 <io_init>
 116:	7e d0       	rcall	.+252    	; 0x214 <init_timer0>
				//hol' up
			}
			
			if(HOT) //if the switch for hot is down
			{
				PORTC = ~0x04; // first LED is hot water
 118:	1b ef       	ldi	r17, 0xFB	; 251
				timer_4s(); //custom timer
				//_delay_ms(4000);//4 sec wait
				PORTC = ~0x00; //turn off
 11a:	cf ef       	ldi	r28, 0xFF	; 255
				motor('A'); //motor agitation function
				motor('A');
				motor('A');
				PORTC = ~0x00; //motor off
								
				PORTC = ~0x01; //drain on
 11c:	de ef       	ldi	r29, 0xFE	; 254
								
				motor('S'); //Motor Spin Function
				motor('S');
				motor('S');
								
				PORTC = ~0x08; //done
 11e:	07 ef       	ldi	r16, 0xF7	; 247
    io_init(); //initialize input output
	init_timer0(); //initialize custom timer
	
    while (1) 
    {
		if(START) //if the start button is pressed
 120:	00 99       	sbic	0x00, 0	; 0
 122:	fe cf       	rjmp	.-4      	; 0x120 <main+0xc>
		{
			while(!CLOSED) //while the door is not open
 124:	4b 99       	sbic	0x09, 3	; 9
 126:	fe cf       	rjmp	.-4      	; 0x124 <main+0x10>
			{
				//hol' up
			}
			
			if(HOT) //if the switch for hot is down
 128:	48 99       	sbic	0x09, 0	; 9
			{
				PORTC = ~0x04; // first LED is hot water
 12a:	fa cf       	rjmp	.-12     	; 0x120 <main+0xc>
				timer_4s(); //custom timer
 12c:	18 b9       	out	0x08, r17	; 8
				//_delay_ms(4000);//4 sec wait
				PORTC = ~0x00; //turn off
								
				motor('A'); //motor agitation function
 12e:	80 d0       	rcall	.+256    	; 0x230 <timer_4s>
				motor('A');
 130:	c8 b9       	out	0x08, r28	; 8
 132:	81 e4       	ldi	r24, 0x41	; 65
				motor('A');
 134:	27 d0       	rcall	.+78     	; 0x184 <motor>
 136:	81 e4       	ldi	r24, 0x41	; 65
				PORTC = ~0x00; //motor off
 138:	25 d0       	rcall	.+74     	; 0x184 <motor>
								
				PORTC = ~0x01; //drain on
 13a:	81 e4       	ldi	r24, 0x41	; 65
				timer_4s(); 
 13c:	23 d0       	rcall	.+70     	; 0x184 <motor>
				//_delay_ms(4000);
				PORTC = ~0x00; //drain off
								
				PORTC = ~0x04; //rinse is same led as selection
				timer_4s();
 13e:	c8 b9       	out	0x08, r28	; 8
				//_delay_ms(4000);//4 sec wait
				PORTC = ~0x00; //turn off all valves
								
				PORTC = ~0x01; //1 indicates drain on
				motor('A'); 
 140:	d8 b9       	out	0x08, r29	; 8
 142:	76 d0       	rcall	.+236    	; 0x230 <timer_4s>
				motor('A');
 144:	c8 b9       	out	0x08, r28	; 8
				motor('A');
 146:	18 b9       	out	0x08, r17	; 8
 148:	73 d0       	rcall	.+230    	; 0x230 <timer_4s>
								
				PORTC = ~0x01; //drain valve is on
 14a:	c8 b9       	out	0x08, r28	; 8
				timer_1s();
 14c:	d8 b9       	out	0x08, r29	; 8
 14e:	81 e4       	ldi	r24, 0x41	; 65
				//_delay_ms(1000); //delay 1 s
				PORTC = ~0x00; //All off
 150:	19 d0       	rcall	.+50     	; 0x184 <motor>
								
				motor('S'); //Motor Spin Function
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	17 d0       	rcall	.+46     	; 0x184 <motor>
 156:	81 e4       	ldi	r24, 0x41	; 65
				motor('S');
 158:	15 d0       	rcall	.+42     	; 0x184 <motor>
 15a:	d8 b9       	out	0x08, r29	; 8
 15c:	73 d0       	rcall	.+230    	; 0x244 <timer_1s>
				motor('S');
 15e:	c8 b9       	out	0x08, r28	; 8
 160:	83 e5       	ldi	r24, 0x53	; 83
 162:	10 d0       	rcall	.+32     	; 0x184 <motor>
								
				PORTC = ~0x08; //done
 164:	83 e5       	ldi	r24, 0x53	; 83
 166:	0e d0       	rcall	.+28     	; 0x184 <motor>
 168:	83 e5       	ldi	r24, 0x53	; 83
 16a:	0c d0       	rcall	.+24     	; 0x184 <motor>
 16c:	08 b9       	out	0x08, r16	; 8
 16e:	d8 cf       	rjmp	.-80     	; 0x120 <main+0xc>

00000170 <io_init>:
 170:	11 b8       	out	0x01, r1	; 1
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	82 b9       	out	0x02, r24	; 2
 176:	1a b8       	out	0x0a, r1	; 10
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	87 b9       	out	0x07, r24	; 7
 17c:	88 b9       	out	0x08, r24	; 8
 17e:	84 b9       	out	0x04, r24	; 4
 180:	85 b9       	out	0x05, r24	; 5
 182:	08 95       	ret

00000184 <motor>:
{
	for(uint16_t i = 0; i < 300; i++)
	{
		custom_timer();
	}	
}
 184:	81 34       	cpi	r24, 0x41	; 65
 186:	99 f0       	breq	.+38     	; 0x1ae <motor+0x2a>
 188:	83 35       	cpi	r24, 0x53	; 83
 18a:	09 f4       	brne	.+2      	; 0x18e <motor+0xa>
 18c:	3c c0       	rjmp	.+120    	; 0x206 <motor+0x82>
 18e:	08 95       	ret
 190:	81 91       	ld	r24, Z+
 192:	85 b9       	out	0x05, r24	; 5
 194:	8f e1       	ldi	r24, 0x1F	; 31
 196:	9e e4       	ldi	r25, 0x4E	; 78
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <motor+0x14>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <motor+0x1a>
 19e:	00 00       	nop
 1a0:	2e 17       	cp	r18, r30
 1a2:	3f 07       	cpc	r19, r31
 1a4:	a9 f7       	brne	.-22     	; 0x190 <motor+0xc>
 1a6:	41 50       	subi	r20, 0x01	; 1
 1a8:	51 09       	sbc	r21, r1
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <motor+0x32>
 1ac:	16 c0       	rjmp	.+44     	; 0x1da <motor+0x56>
 1ae:	49 e1       	ldi	r20, 0x19	; 25
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	28 e0       	ldi	r18, 0x08	; 8
 1b4:	32 e0       	ldi	r19, 0x02	; 2
 1b6:	e0 e0       	ldi	r30, 0x00	; 0
 1b8:	f2 e0       	ldi	r31, 0x02	; 2
 1ba:	ea cf       	rjmp	.-44     	; 0x190 <motor+0xc>
 1bc:	82 91       	ld	r24, -Z
 1be:	85 b9       	out	0x05, r24	; 5
 1c0:	8f e1       	ldi	r24, 0x1F	; 31
 1c2:	9e e4       	ldi	r25, 0x4E	; 78
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <motor+0x40>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <motor+0x46>
 1ca:	00 00       	nop
 1cc:	e2 17       	cp	r30, r18
 1ce:	f3 07       	cpc	r31, r19
 1d0:	a9 f7       	brne	.-22     	; 0x1bc <motor+0x38>
 1d2:	41 50       	subi	r20, 0x01	; 1
 1d4:	51 09       	sbc	r21, r1
 1d6:	29 f4       	brne	.+10     	; 0x1e2 <motor+0x5e>
 1d8:	08 95       	ret
 1da:	49 e1       	ldi	r20, 0x19	; 25
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	32 e0       	ldi	r19, 0x02	; 2
 1e2:	e9 e0       	ldi	r30, 0x09	; 9
 1e4:	f2 e0       	ldi	r31, 0x02	; 2
 1e6:	ea cf       	rjmp	.-44     	; 0x1bc <motor+0x38>
 1e8:	81 91       	ld	r24, Z+
 1ea:	85 b9       	out	0x05, r24	; 5
 1ec:	8f ed       	ldi	r24, 0xDF	; 223
 1ee:	9e e2       	ldi	r25, 0x2E	; 46
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <motor+0x6c>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <motor+0x72>
 1f6:	00 00       	nop
 1f8:	2e 17       	cp	r18, r30
 1fa:	3f 07       	cpc	r19, r31
 1fc:	a9 f7       	brne	.-22     	; 0x1e8 <motor+0x64>
 1fe:	41 50       	subi	r20, 0x01	; 1
 200:	51 09       	sbc	r21, r1
 202:	29 f4       	brne	.+10     	; 0x20e <motor+0x8a>
 204:	08 95       	ret
 206:	4c e2       	ldi	r20, 0x2C	; 44
 208:	51 e0       	ldi	r21, 0x01	; 1
 20a:	2c e0       	ldi	r18, 0x0C	; 12
 20c:	32 e0       	ldi	r19, 0x02	; 2
 20e:	e8 e0       	ldi	r30, 0x08	; 8
 210:	f2 e0       	ldi	r31, 0x02	; 2
 212:	ea cf       	rjmp	.-44     	; 0x1e8 <motor+0x64>

00000214 <init_timer0>:
 214:	16 bc       	out	0x26, r1	; 38
 216:	8c e9       	ldi	r24, 0x9C	; 156
 218:	87 bd       	out	0x27, r24	; 39
 21a:	14 bc       	out	0x24, r1	; 36
 21c:	15 bc       	out	0x25, r1	; 37
 21e:	08 95       	ret

00000220 <custom_timer>:
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	85 bd       	out	0x25, r24	; 37
 224:	a9 9b       	sbis	0x15, 1	; 21
 226:	fe cf       	rjmp	.-4      	; 0x224 <custom_timer+0x4>
 228:	15 bc       	out	0x25, r1	; 37
 22a:	a9 9a       	sbi	0x15, 1	; 21
 22c:	16 bc       	out	0x26, r1	; 38
 22e:	08 95       	ret

00000230 <timer_4s>:
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	c0 e9       	ldi	r28, 0x90	; 144
 236:	d1 e0       	ldi	r29, 0x01	; 1
 238:	f3 df       	rcall	.-26     	; 0x220 <custom_timer>
 23a:	21 97       	sbiw	r28, 0x01	; 1
 23c:	e9 f7       	brne	.-6      	; 0x238 <timer_4s+0x8>
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <timer_1s>:
void timer_1s(void)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	c4 e6       	ldi	r28, 0x64	; 100
	for(uint16_t i = 0; i < 100; i++)
	{
		custom_timer();
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	e9 df       	rcall	.-46     	; 0x220 <custom_timer>
		custom_timer();
	}	
}
void timer_1s(void)
{
	for(uint16_t i = 0; i < 100; i++)
 24e:	21 97       	sbiw	r28, 0x01	; 1
	{
		custom_timer();
	}	
 250:	e9 f7       	brne	.-6      	; 0x24c <timer_1s+0x8>
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
