
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eca  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d03  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000666  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002774  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b7  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ff  00000000  00000000  00002e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	be d0       	rcall	.+380    	; 0x272 <main>
  f6:	6f c1       	rjmp	.+734    	; 0x3d6 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <dc_init>:
#include <avr/io.h> //standard io
#include "timers.h"

//DC motor control functions
void dc_init(void)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = 0x83; //Clear OC3A on compare match (8), fast PWM (1)
 102:	80 e9       	ldi	r24, 0x90	; 144
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	23 e8       	ldi	r18, 0x83	; 131
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	TCCR3B = 0x0C; //1024 Top Value
 10c:	81 e9       	ldi	r24, 0x91	; 145
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	2c e0       	ldi	r18, 0x0C	; 12
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
}
 116:	00 00       	nop
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <fast_PWM>:

//Fast PWM Function For DC motor
void fast_PWM(uint8_t duty_cycle)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	00 d0       	rcall	.+0      	; 0x124 <fast_PWM+0x6>
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t num;  //some value
	TCCR3A |= (1<<COM3A1); //Enable this part
 12a:	80 e9       	ldi	r24, 0x90	; 144
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	20 e9       	ldi	r18, 0x90	; 144
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	20 81       	ld	r18, Z
 136:	20 68       	ori	r18, 0x80	; 128
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
	num = ((uint32_t) duty_cycle * 1024)/100; //calculate the number
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	07 2e       	mov	r0, r23
 148:	7a e0       	ldi	r23, 0x0A	; 10
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	aa 1f       	adc	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	7a 95       	dec	r23
 154:	d1 f7       	brne	.-12     	; 0x14a <fast_PWM+0x2c>
 156:	70 2d       	mov	r23, r0
 158:	24 e6       	ldi	r18, 0x64	; 100
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	bc 01       	movw	r22, r24
 162:	cd 01       	movw	r24, r26
 164:	16 d1       	rcall	.+556    	; 0x392 <__udivmodsi4>
 166:	da 01       	movw	r26, r20
 168:	c9 01       	movw	r24, r18
 16a:	9a 83       	std	Y+2, r25	; 0x02
 16c:	89 83       	std	Y+1, r24	; 0x01
	OCR3A = num; //output the number to PORTE.6
 16e:	88 e9       	ldi	r24, 0x98	; 152
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	29 81       	ldd	r18, Y+1	; 0x01
 174:	3a 81       	ldd	r19, Y+2	; 0x02
 176:	fc 01       	movw	r30, r24
 178:	31 83       	std	Z+1, r19	; 0x01
 17a:	20 83       	st	Z, r18
	//OCR3A  = 614;
	TCCR3B |= (1<<CS32); //Actually compare the OCR to the CS
 17c:	81 e9       	ldi	r24, 0x91	; 145
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	21 e9       	ldi	r18, 0x91	; 145
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	f9 01       	movw	r30, r18
 186:	20 81       	ld	r18, Z
 188:	24 60       	ori	r18, 0x04	; 4
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
}
 18e:	00 00       	nop
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <PUMP_IT_UP>:

//RAMP THAT MOTOR UP AND BRING IT BACK DOWN
void PUMP_IT_UP(void)
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <PUMP_IT_UP+0x6>
 1a2:	1f 92       	push	r1
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
		uint16_t num = 10;
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	89 83       	std	Y+1, r24	; 0x01
		for(uint8_t i = 0; i < 8; i++)
 1b0:	1b 82       	std	Y+3, r1	; 0x03
 1b2:	0d c0       	rjmp	.+26     	; 0x1ce <PUMP_IT_UP+0x32>
		{
			num += 10;
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	9a 81       	ldd	r25, Y+2	; 0x02
 1b8:	0a 96       	adiw	r24, 0x0a	; 10
 1ba:	9a 83       	std	Y+2, r25	; 0x02
 1bc:	89 83       	std	Y+1, r24	; 0x01
			fast_PWM(num);
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	ae df       	rcall	.-164    	; 0x11e <fast_PWM>
			timer(1000);
 1c2:	88 ee       	ldi	r24, 0xE8	; 232
 1c4:	93 e0       	ldi	r25, 0x03	; 3
 1c6:	c5 d0       	rcall	.+394    	; 0x352 <timer>

//RAMP THAT MOTOR UP AND BRING IT BACK DOWN
void PUMP_IT_UP(void)
{
		uint16_t num = 10;
		for(uint8_t i = 0; i < 8; i++)
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	8b 83       	std	Y+3, r24	; 0x03
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	88 30       	cpi	r24, 0x08	; 8
		{
			num += 10;
			fast_PWM(num);
			timer(1000);
		}
		fast_PWM(num);
 1d2:	80 f3       	brcs	.-32     	; 0x1b4 <PUMP_IT_UP+0x18>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
		timer(5000);
 1d6:	a3 df       	rcall	.-186    	; 0x11e <fast_PWM>
 1d8:	88 e8       	ldi	r24, 0x88	; 136
 1da:	93 e1       	ldi	r25, 0x13	; 19
 1dc:	ba d0       	rcall	.+372    	; 0x352 <timer>
		for(uint8_t i = 15; i > 0; i--)
 1de:	8f e0       	ldi	r24, 0x0F	; 15
 1e0:	8c 83       	std	Y+4, r24	; 0x04
 1e2:	0d c0       	rjmp	.+26     	; 0x1fe <PUMP_IT_UP+0x62>
		{
			num -= 6; //90/15
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	06 97       	sbiw	r24, 0x06	; 6
			fast_PWM(num);
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	89 83       	std	Y+1, r24	; 0x01
			timer(1000);
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	96 df       	rcall	.-212    	; 0x11e <fast_PWM>
 1f2:	88 ee       	ldi	r24, 0xE8	; 232
 1f4:	93 e0       	ldi	r25, 0x03	; 3
			fast_PWM(num);
			timer(1000);
		}
		fast_PWM(num);
		timer(5000);
		for(uint8_t i = 15; i > 0; i--)
 1f6:	ad d0       	rcall	.+346    	; 0x352 <timer>
 1f8:	8c 81       	ldd	r24, Y+4	; 0x04
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	8c 83       	std	Y+4, r24	; 0x04
 1fe:	8c 81       	ldd	r24, Y+4	; 0x04
 200:	88 23       	and	r24, r24
		{
			num -= 6; //90/15
			fast_PWM(num);
			timer(1000);
		}	
 202:	81 f7       	brne	.-32     	; 0x1e4 <PUMP_IT_UP+0x48>
 204:	00 00       	nop
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <io_init>:

#include <avr/io.h> //standard io


void io_init(void)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
	//inputs
	DDRA = 0x00; //PORTA is inputs
 21c:	81 e2       	ldi	r24, 0x21	; 33
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	fc 01       	movw	r30, r24
 222:	10 82       	st	Z, r1
	PORTA = ~0x00; //negative logic for pullup resistors
 224:	82 e2       	ldi	r24, 0x22	; 34
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18

	//outputs
	DDRC = 0xFF; //set PORTC as outputs
 22e:	87 e2       	ldi	r24, 0x27	; 39
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
	PORTC = ~0x00; //outputs initially off
 238:	88 e2       	ldi	r24, 0x28	; 40
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
	DDRB = 0xFF;
 242:	84 e2       	ldi	r24, 0x24	; 36
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
	PORTB = 0xFF;
 24c:	85 e2       	ldi	r24, 0x25	; 37
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
	
	//Motor Output
	DDRE = 0xFF;
 256:	8d e2       	ldi	r24, 0x2D	; 45
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
	PORTE = 0xFF;
 260:	8e e2       	ldi	r24, 0x2E	; 46
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
}
 26a:	00 00       	nop
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <main>:
#include "timers.h"
#include "io_ports.h"
#include "dc.h"

int main(void)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
	io_init(); //I/0
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	cc df       	rcall	.-104    	; 0x214 <io_init>
 27c:	28 d0       	rcall	.+80     	; 0x2ce <init_timer0>
 27e:	3d df       	rcall	.-390    	; 0xfa <dc_init>
 280:	01 c0       	rjmp	.+2      	; 0x284 <main+0x12>
 282:	8c df       	rcall	.-232    	; 0x19c <PUMP_IT_UP>
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	80 81       	ld	r24, Z
 28c:	88 2f       	mov	r24, r24
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	81 70       	andi	r24, 0x01	; 1
 292:	99 27       	eor	r25, r25
 294:	89 2b       	or	r24, r25
 296:	a9 f3       	breq	.-22     	; 0x282 <main+0x10>
 298:	02 c0       	rjmp	.+4      	; 0x29e <main+0x2c>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	40 df       	rcall	.-384    	; 0x11e <fast_PWM>
 29e:	80 e2       	ldi	r24, 0x20	; 32
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	80 81       	ld	r24, Z
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	82 70       	andi	r24, 0x02	; 2
 2ac:	99 27       	eor	r25, r25
 2ae:	89 2b       	or	r24, r25
 2b0:	a1 f3       	breq	.-24     	; 0x29a <main+0x28>
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <main+0x46>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	33 df       	rcall	.-410    	; 0x11e <fast_PWM>
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	80 81       	ld	r24, Z
 2c0:	88 2f       	mov	r24, r24
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	84 70       	andi	r24, 0x04	; 4
 2c6:	99 27       	eor	r25, r25
 2c8:	89 2b       	or	r24, r25
 2ca:	a1 f3       	breq	.-24     	; 0x2b4 <main+0x42>
 2cc:	d9 cf       	rjmp	.-78     	; 0x280 <main+0xe>

000002ce <init_timer0>:
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	86 e4       	ldi	r24, 0x46	; 70
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	fc 01       	movw	r30, r24
 2dc:	10 82       	st	Z, r1
 2de:	87 e4       	ldi	r24, 0x47	; 71
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	20 e1       	ldi	r18, 0x10	; 16
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
 2e8:	84 e4       	ldi	r24, 0x44	; 68
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	10 82       	st	Z, r1
 2f0:	85 e4       	ldi	r24, 0x45	; 69
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	fc 01       	movw	r30, r24
 2f6:	10 82       	st	Z, r1
 2f8:	00 00       	nop
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <custom_timer>:
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	85 e4       	ldi	r24, 0x45	; 69
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	25 e0       	ldi	r18, 0x05	; 5
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
 312:	00 00       	nop
 314:	85 e3       	ldi	r24, 0x35	; 53
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	80 81       	ld	r24, Z
 31c:	88 2f       	mov	r24, r24
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	82 70       	andi	r24, 0x02	; 2
 322:	99 27       	eor	r25, r25
 324:	89 2b       	or	r24, r25
 326:	b1 f3       	breq	.-20     	; 0x314 <custom_timer+0x14>
 328:	85 e4       	ldi	r24, 0x45	; 69
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	fc 01       	movw	r30, r24
 32e:	10 82       	st	Z, r1
 330:	85 e3       	ldi	r24, 0x35	; 53
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	25 e3       	ldi	r18, 0x35	; 53
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	22 60       	ori	r18, 0x02	; 2
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
 342:	86 e4       	ldi	r24, 0x46	; 70
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	fc 01       	movw	r30, r24
 348:	10 82       	st	Z, r1
 34a:	00 00       	nop
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <timer>:
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	00 d0       	rcall	.+0      	; 0x358 <timer+0x6>
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	9c 83       	std	Y+4, r25	; 0x04
 360:	8b 83       	std	Y+3, r24	; 0x03
 362:	1a 82       	std	Y+2, r1	; 0x02
 364:	19 82       	std	Y+1, r1	; 0x01
 366:	06 c0       	rjmp	.+12     	; 0x374 <timer+0x22>
 368:	cb df       	rcall	.-106    	; 0x300 <custom_timer>
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	9a 81       	ldd	r25, Y+2	; 0x02
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	9a 83       	std	Y+2, r25	; 0x02
 372:	89 83       	std	Y+1, r24	; 0x01
 374:	29 81       	ldd	r18, Y+1	; 0x01
 376:	3a 81       	ldd	r19, Y+2	; 0x02
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	9c 81       	ldd	r25, Y+4	; 0x04
 37c:	28 17       	cp	r18, r24
 37e:	39 07       	cpc	r19, r25
 380:	98 f3       	brcs	.-26     	; 0x368 <timer+0x16>
 382:	00 00       	nop
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <__udivmodsi4>:
 392:	a1 e2       	ldi	r26, 0x21	; 33
 394:	1a 2e       	mov	r1, r26
 396:	aa 1b       	sub	r26, r26
 398:	bb 1b       	sub	r27, r27
 39a:	fd 01       	movw	r30, r26
 39c:	0d c0       	rjmp	.+26     	; 0x3b8 <__udivmodsi4_ep>

0000039e <__udivmodsi4_loop>:
 39e:	aa 1f       	adc	r26, r26
 3a0:	bb 1f       	adc	r27, r27
 3a2:	ee 1f       	adc	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	a2 17       	cp	r26, r18
 3a8:	b3 07       	cpc	r27, r19
 3aa:	e4 07       	cpc	r30, r20
 3ac:	f5 07       	cpc	r31, r21
 3ae:	20 f0       	brcs	.+8      	; 0x3b8 <__udivmodsi4_ep>
 3b0:	a2 1b       	sub	r26, r18
 3b2:	b3 0b       	sbc	r27, r19
 3b4:	e4 0b       	sbc	r30, r20
 3b6:	f5 0b       	sbc	r31, r21

000003b8 <__udivmodsi4_ep>:
 3b8:	66 1f       	adc	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	88 1f       	adc	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	1a 94       	dec	r1
 3c2:	69 f7       	brne	.-38     	; 0x39e <__udivmodsi4_loop>
 3c4:	60 95       	com	r22
 3c6:	70 95       	com	r23
 3c8:	80 95       	com	r24
 3ca:	90 95       	com	r25
 3cc:	9b 01       	movw	r18, r22
 3ce:	ac 01       	movw	r20, r24
 3d0:	bd 01       	movw	r22, r26
 3d2:	cf 01       	movw	r24, r30
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
