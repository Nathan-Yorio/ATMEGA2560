
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000310  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000384  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f36  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d38  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  000020da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c0  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d7  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002ea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	d0 c0       	rjmp	.+416    	; 0x27a <__vector_54>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e1       	ldi	r30, 0x10	; 16
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 30       	cpi	r26, 0x02	; 2
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	20 d0       	rcall	.+64     	; 0x160 <main>
 120:	f5 c0       	rjmp	.+490    	; 0x30c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <io_init>:

#include <avr/io.h> //standard io


void io_init(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	//Input
	DDRJ = 0x00; //set PORTJ as inputs
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	fc 01       	movw	r30, r24
 132:	10 82       	st	Z, r1
	DDRA = 0x00; //set PORTA as inputs
 134:	81 e2       	ldi	r24, 0x21	; 33
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	10 82       	st	Z, r1
	PORTA = ~0x00; //outputs initially off
 13c:	82 e2       	ldi	r24, 0x22	; 34
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
	
	//Output
	DDRC = 0xFF;
 146:	87 e2       	ldi	r24, 0x27	; 39
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	PORTC = 0x00;
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	10 82       	st	Z, r1
}
 158:	00 00       	nop
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <main>:
#include "io_ports.h"
#include "Serial_print.h"


int main (void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
	Init_UART3();				   //set up UART0
 16a:	0e d0       	rcall	.+28     	; 0x188 <Init_UART3>
	io_init();					   //initialize IO
 16c:	db df       	rcall	.-74     	; 0x124 <io_init>
 16e:	78 94       	sei
	sei();
 170:	83 e2       	ldi	r24, 0x23	; 35
	uint16_t output;
	
	while(1)
	{
		//txchar = ~PINA;
		txchar = 0x23;
 172:	89 83       	std	Y+1, r24	; 0x01
		UART3_Out(txchar);
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	66 d0       	rcall	.+204    	; 0x244 <UART3_Out>
 178:	88 e2       	ldi	r24, 0x28	; 40
		PORTC = ~rx_ch;
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <rx_ch>
 180:	20 95       	com	r18
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
 186:	f4 cf       	rjmp	.-24     	; 0x170 <main+0x10>

00000188 <Init_UART3>:
	}
 188:	cf 93       	push	r28
uint8_t UART3_In(void)
{
	while((UCSR3A & (1<<UDRE3))==0);	//wait until UDR3
										//is ready for new data
	return (UDR3);
}
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <Init_UART3+0x6>
 18e:	00 d0       	rcall	.+0      	; 0x190 <Init_UART3+0x8>
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	80 e3       	ldi	r24, 0x30	; 48
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	fc 01       	movw	r30, r24
 19a:	10 82       	st	Z, r1
 19c:	81 e3       	ldi	r24, 0x31	; 49
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	21 e3       	ldi	r18, 0x31	; 49
 1a2:	31 e0       	ldi	r19, 0x01	; 1
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	28 60       	ori	r18, 0x08	; 8
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	81 e3       	ldi	r24, 0x31	; 49
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	21 e3       	ldi	r18, 0x31	; 49
 1b4:	31 e0       	ldi	r19, 0x01	; 1
 1b6:	f9 01       	movw	r30, r18
 1b8:	20 81       	ld	r18, Z
 1ba:	20 61       	ori	r18, 0x10	; 16
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
 1c0:	81 e3       	ldi	r24, 0x31	; 49
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	21 e3       	ldi	r18, 0x31	; 49
 1c6:	31 e0       	ldi	r19, 0x01	; 1
 1c8:	f9 01       	movw	r30, r18
 1ca:	20 81       	ld	r18, Z
 1cc:	20 68       	ori	r18, 0x80	; 128
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
 1d2:	82 e3       	ldi	r24, 0x32	; 50
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	22 e3       	ldi	r18, 0x32	; 50
 1d8:	31 e0       	ldi	r19, 0x01	; 1
 1da:	f9 01       	movw	r30, r18
 1dc:	20 81       	ld	r18, Z
 1de:	26 60       	ori	r18, 0x06	; 6
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	98 e5       	ldi	r25, 0x58	; 88
 1e8:	a2 e0       	ldi	r26, 0x02	; 2
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	ab 83       	std	Y+3, r26	; 0x03
 1f2:	bc 83       	std	Y+4, r27	; 0x04
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	94 e2       	ldi	r25, 0x24	; 36
 1f8:	a4 ef       	ldi	r26, 0xF4	; 244
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	29 81       	ldd	r18, Y+1	; 0x01
 1fe:	3a 81       	ldd	r19, Y+2	; 0x02
 200:	4b 81       	ldd	r20, Y+3	; 0x03
 202:	5c 81       	ldd	r21, Y+4	; 0x04
 204:	bc 01       	movw	r22, r24
 206:	cd 01       	movw	r24, r26
 208:	5f d0       	rcall	.+190    	; 0x2c8 <__udivmodsi4>
 20a:	da 01       	movw	r26, r20
 20c:	c9 01       	movw	r24, r18
 20e:	89 83       	std	Y+1, r24	; 0x01
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	ab 83       	std	Y+3, r26	; 0x03
 214:	bc 83       	std	Y+4, r27	; 0x04
 216:	87 e6       	ldi	r24, 0x67	; 103
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	9e 83       	std	Y+6, r25	; 0x06
 21c:	8d 83       	std	Y+5, r24	; 0x05
 21e:	84 e3       	ldi	r24, 0x34	; 52
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	2d 81       	ldd	r18, Y+5	; 0x05
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	fc 01       	movw	r30, r24
 22e:	10 82       	st	Z, r1
 230:	00 00       	nop
 232:	26 96       	adiw	r28, 0x06	; 6
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <UART3_Out>:
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	1f 92       	push	r1
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	00 00       	nop
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	fc 01       	movw	r30, r24
 258:	80 81       	ld	r24, Z
 25a:	88 2f       	mov	r24, r24
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	80 72       	andi	r24, 0x20	; 32
 260:	99 27       	eor	r25, r25
 262:	89 2b       	or	r24, r25
 264:	b1 f3       	breq	.-20     	; 0x252 <UART3_Out+0xe>
 266:	86 e3       	ldi	r24, 0x36	; 54
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	29 81       	ldd	r18, Y+1	; 0x01
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
 270:	00 00       	nop
 272:	0f 90       	pop	r0
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <__vector_54>:
ISR(USART3_RX_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 28a:	0f 92       	push	r0
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	rx_ch = UDR3;
 29c:	86 e3       	ldi	r24, 0x36	; 54
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <rx_ch>
}
 2a8:	00 00       	nop
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	0f 90       	pop	r0
 2b8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 2bc:	0f 90       	pop	r0
 2be:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <__udivmodsi4>:
 2c8:	a1 e2       	ldi	r26, 0x21	; 33
 2ca:	1a 2e       	mov	r1, r26
 2cc:	aa 1b       	sub	r26, r26
 2ce:	bb 1b       	sub	r27, r27
 2d0:	fd 01       	movw	r30, r26
 2d2:	0d c0       	rjmp	.+26     	; 0x2ee <__udivmodsi4_ep>

000002d4 <__udivmodsi4_loop>:
 2d4:	aa 1f       	adc	r26, r26
 2d6:	bb 1f       	adc	r27, r27
 2d8:	ee 1f       	adc	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	a2 17       	cp	r26, r18
 2de:	b3 07       	cpc	r27, r19
 2e0:	e4 07       	cpc	r30, r20
 2e2:	f5 07       	cpc	r31, r21
 2e4:	20 f0       	brcs	.+8      	; 0x2ee <__udivmodsi4_ep>
 2e6:	a2 1b       	sub	r26, r18
 2e8:	b3 0b       	sbc	r27, r19
 2ea:	e4 0b       	sbc	r30, r20
 2ec:	f5 0b       	sbc	r31, r21

000002ee <__udivmodsi4_ep>:
 2ee:	66 1f       	adc	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	88 1f       	adc	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	1a 94       	dec	r1
 2f8:	69 f7       	brne	.-38     	; 0x2d4 <__udivmodsi4_loop>
 2fa:	60 95       	com	r22
 2fc:	70 95       	com	r23
 2fe:	80 95       	com	r24
 300:	90 95       	com	r25
 302:	9b 01       	movw	r18, r22
 304:	ac 01       	movw	r20, r24
 306:	bd 01       	movw	r22, r26
 308:	cf 01       	movw	r24, r30
 30a:	08 95       	ret

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
