
Debugging.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000292  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3e  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c09  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000411  00000000  00000000  00001c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056c  00000000  00000000  0000212c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	89 c0       	rjmp	.+274    	; 0x21a <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:
#include <avr/delay.h>
void minute_counter(void);
uint8_t minute;

int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	1f 92       	push	r1
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	uint8_t value = 0x01; //establish a value to bitshift
 114:	81 e0       	ldi	r24, 0x01	; 1
	
	io_init(); //initialize input output
 116:	89 83       	std	Y+1, r24	; 0x01

	
	while (1)
	{
		if(Pattern_PB == START) //is the pushbutton equal to pushbutton 1?
 118:	5c d0       	rcall	.+184    	; 0x1d2 <io_init>
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	80 95       	com	r24
 128:	90 95       	com	r25
 12a:	87 70       	andi	r24, 0x07	; 7
 12c:	99 27       	eor	r25, r25
		{
			minute_counter();
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	a1 f7       	brne	.-24     	; 0x11a <main+0x10>
			minute++;
 132:	06 d0       	rcall	.+12     	; 0x140 <minute_counter>
 134:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 13e:	ed cf       	rjmp	.-38     	; 0x11a <main+0x10>

00000140 <minute_counter>:
	}
}


void minute_counter(void)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	00 d0       	rcall	.+0      	; 0x146 <minute_counter+0x6>
 146:	1f 92       	push	r1
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
	uint8_t ctr;
	uint8_t ctr1;
	uint8_t inner_loop = 0;
 14c:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t outer_loop = 0;
 14e:	1c 82       	std	Y+4, r1	; 0x04

		for(ctr = 0; ctr < 6; ctr++)
 150:	19 82       	std	Y+1, r1	; 0x01
 152:	34 c0       	rjmp	.+104    	; 0x1bc <minute_counter+0x7c>
		{
			for(ctr1 = 0; ctr1 < 10; ctr1++)
 154:	1a 82       	std	Y+2, r1	; 0x02
 156:	17 c0       	rjmp	.+46     	; 0x186 <minute_counter+0x46>
			{
				//_delay_ms(1000);
				inner_loop++;
 158:	8b 81       	ldd	r24, Y+3	; 0x03
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	8b 83       	std	Y+3, r24	; 0x03
				PORTC = ~((outer_loop << 4) | inner_loop);
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	2c 81       	ldd	r18, Y+4	; 0x04
 164:	22 2f       	mov	r18, r18
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	22 95       	swap	r18
 16a:	32 95       	swap	r19
 16c:	30 7f       	andi	r19, 0xF0	; 240
 16e:	32 27       	eor	r19, r18
 170:	20 7f       	andi	r18, 0xF0	; 240
 172:	32 27       	eor	r19, r18
 174:	32 2f       	mov	r19, r18
 176:	2b 81       	ldd	r18, Y+3	; 0x03
 178:	23 2b       	or	r18, r19
 17a:	20 95       	com	r18
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
	uint8_t inner_loop = 0;
	uint8_t outer_loop = 0;

		for(ctr = 0; ctr < 6; ctr++)
		{
			for(ctr1 = 0; ctr1 < 10; ctr1++)
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	8a 83       	std	Y+2, r24	; 0x02
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	8a 30       	cpi	r24, 0x0A	; 10
 18a:	30 f3       	brcs	.-52     	; 0x158 <minute_counter+0x18>
			{
				//_delay_ms(1000);
				inner_loop++;
				PORTC = ~((outer_loop << 4) | inner_loop);
			}
			inner_loop = 0;
 18c:	1b 82       	std	Y+3, r1	; 0x03
			//_delay_ms(1000);
			outer_loop++;
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	8c 83       	std	Y+4, r24	; 0x04
			PORTC = ~((outer_loop << 4) | inner_loop);
 194:	88 e2       	ldi	r24, 0x28	; 40
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	2c 81       	ldd	r18, Y+4	; 0x04
 19a:	22 2f       	mov	r18, r18
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	22 95       	swap	r18
 1a0:	32 95       	swap	r19
 1a2:	30 7f       	andi	r19, 0xF0	; 240
 1a4:	32 27       	eor	r19, r18
 1a6:	20 7f       	andi	r18, 0xF0	; 240
 1a8:	32 27       	eor	r19, r18
 1aa:	32 2f       	mov	r19, r18
 1ac:	2b 81       	ldd	r18, Y+3	; 0x03
 1ae:	23 2b       	or	r18, r19
 1b0:	20 95       	com	r18
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
	uint8_t ctr;
	uint8_t ctr1;
	uint8_t inner_loop = 0;
	uint8_t outer_loop = 0;

		for(ctr = 0; ctr < 6; ctr++)
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	86 30       	cpi	r24, 0x06	; 6
 1c0:	48 f2       	brcs	.-110    	; 0x154 <minute_counter+0x14>
			//_delay_ms(1000);
			outer_loop++;
			PORTC = ~((outer_loop << 4) | inner_loop);
		}

 1c2:	00 00       	nop
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <io_init>:

#include <avr/io.h> //standard io
#include "io_ports.h" //pulls in io_ports.h

void io_init(void)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; //PB7 LED On Board or DDRB = 0x80, doesn't matter much
 1da:	84 e2       	ldi	r24, 0x24	; 36
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
	PORTB = 0x00; //pull up resistors
 1e4:	85 e2       	ldi	r24, 0x25	; 37
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	fc 01       	movw	r30, r24
 1ea:	10 82       	st	Z, r1
	
	DDRA = 0x00; //PORTA is inputs
 1ec:	81 e2       	ldi	r24, 0x21	; 33
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	10 82       	st	Z, r1
	PORTA = ~0x00; //negative logic for pullup resistors
 1f4:	82 e2       	ldi	r24, 0x22	; 34
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	DDRC = 0xFF; //set PORTC as outputs
 1fe:	87 e2       	ldi	r24, 0x27	; 39
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18
	PORTC = ~0x00; //pull up resistors
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
}
 212:	00 00       	nop
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
